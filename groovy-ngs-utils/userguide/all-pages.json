[{"type":"Page","content":[{"id":"groovy-ngs","title":"Groovy NGS","type":"Section","content":[{"type":"Paragraph","content":[{"text":"A toolkit for working with genomic sequencing data in Groovy.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The JVM is a powerful platform for data analysis, offering high performance, strong library and platform","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"support with excellent deployment options when it comes time to scale up and productionise your work.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Groovy NGS aims to unlock the power of the JVM for working with genomic sequencing data by enabling it","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to be used with the versatile and highly productive Groovy programming language.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Groovy NGS can be used at three levels:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Directly as pre-written tools on the command line","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"For writing simple scripts (bash-style) or interactive analysis in","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://github.com/ssadedin/beakerx","isFile":false,"type":"Link","content":[{"text":"Jupyter Notebooks","type":"SimpleText"}]}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"As a library of classes for building full-scale applications","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Under the hood, Groovy NGS is built on the widely used ","type":"SimpleText"},{"url":"https://github.com/samtools/htsjdk","isFile":false,"type":"Link","content":[{"text":"HTSJDK","type":"SimpleText"}]},{"text":". However","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Groovy NGS makes it much easier to work with these libraries by adding idiomatic Groovy","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"language constructs and filling in important commonly used missing features.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Examples of supported functionality are:","type":"SimpleText"}]},{"bulletMarker":"*","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Reading, processing and filtering VCF files, including integration with common annotation sources such as VEP","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Working with Genomic Ranges - full set of operation as well as higher level reading, processing and filtering","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Reading, processing and performing logical operations with pedigree (PED) files and family structures","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Working with BAM/SAM/CRAM files (including, generating and working with Pileups)","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"A range of statistical operations including R-like data frames and linear modeling constructs","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Many many more useful operations","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1754207383382,"tocItem":{"chapterTitle":"","pageTitle":"","pageMeta":{},"dirName":"","fileName":"index","fileExtension":"","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Groovy NGS","id":"groovy-ngs"}]}},{"type":"Page","content":[{"id":"what-is-groovy-ngs","title":"What is Groovy NGS?","type":"Section","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Welcome to Groovy NGS!","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"Groovy NGS tries to unlock the power of the JVM as a scripting and rapid application development platform","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for analysis of genomic sequencing data (particularly,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"NGS data). It does this by building on the popular ","type":"SimpleText"},{"url":"https://github.com/samtools/htsjdk","isFile":false,"type":"Link","content":[{"text":"HTSJDK","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"library to make its functionality greatly more accessible - primarily, by exposing it in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an idiomatic way in the Groovy JVM language.","type":"SimpleText"}]}]},{"id":"why-groovy","title":"Why Groovy?","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Groovy is a dynamic programming language","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that is widely used for scripting, domain specific languages","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"(such as ","type":"SimpleText"},{"url":"https://bpipe.org","isFile":false,"type":"Link","content":[{"text":"Bpipe","type":"SimpleText"}]},{"text":" and ","type":"SimpleText"},{"url":"https://nextflow.io","isFile":false,"type":"Link","content":[{"text":"Nextflow","type":"SimpleText"}]},{"text":") as well as full","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"applications. It brings a unique","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"blend of high performance and dynamic features that are ideal for rapid","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"application development and interactive analysis. In many ways, Groovy is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"similar to Python from a language point of view, but without the downsides of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Python such as slow performance and parallelisation capabilities, and with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"seamless integration into the enormous Java library ecosystem.","type":"SimpleText"}]}]},{"id":"structure","title":"Structure","type":"Section","content":[{"type":"Paragraph","content":[{"text":"This guide first presents some conceptual and foundational topics and then","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is split into sections based on the broad types categories of functionalities that are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"available.","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Chapter 1: Key foundations - installing, running and writing simple scripts","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Chapter 2: Working with Genomic Regions","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Chapter 3: Working with VCFs","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Chapter 4: Working with alignment files (BAM, CRAM)","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Chapter 5: Miscellaneous Utilities","type":"SimpleText"}]}]}]}]},{"id":"api-documentation","title":"API Documentation","type":"Section","content":[{"type":"Paragraph","content":[{"text":"This guide is designed to give you a user friendly introduction to Groovy NGS with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"plenty of examples and explanations. There are, however, many more details that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are not contained here. To fully understand usage of the classes as well as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"important limitations, reference the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/","isFile":false,"type":"Link","content":[{"text":"API documentation","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383382,"tocItem":{"chapterTitle":"Chapter One","pageTitle":"Introduction","pageMeta":{},"dirName":"chapter-one","fileName":"introduction","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"What is Groovy NGS?","id":"what-is-groovy-ngs"},{"title":"Why Groovy?","id":"why-groovy"},{"title":"Structure","id":"structure"},{"title":"API Documentation","id":"api-documentation"}]}},{"type":"Page","content":[{"id":"as-a-dependency-in-projects","title":"As a Dependency In Projects","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The default way to use Groovy NGS is to build a \"fat\" jar and include it in your project.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This jar file can be created by cloning the repository and executing the gradle command","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to build the jar:","type":"SimpleText"}]},{"lang":"","snippet":"git clone --recursive https://github.com/ssadedin/groovy-ngs-utils.git\n./gradlew jar\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The jar file is created in ","type":"SimpleText"},{"code":"build/libs/groovy-ngs-utils.jar","type":"InlinedCode"},{"text":" and includes all necessary dependencies","type":"SimpleText"},{"type":"SoftLineBreak"},{"type":"Emphasis","content":[{"text":"except","type":"SimpleText"}]},{"text":" for Groovy itself. Therefore, you should include the ","type":"SimpleText"},{"url":"https://mvnrepository.com/artifact/org.apache.groovy/groovy-all","isFile":false,"type":"Link","content":[{"text":"groovy-all","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"dependency from Maven for the appropriate Groovy version in your project as well.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: in the future it is expected that Groovy NGS will move to support Maven","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"repository based dependency resolution so that it can be more easily included in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"other projects.","type":"SimpleText"}]}]},{"id":"on-the-command-line","title":"On the Command Line","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Another way to use Groovy NGS is to use the ","type":"SimpleText"},{"code":"gngs","type":"InlinedCode"},{"text":" command to execute expressions directly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"on the command line. For example, after building (as above), to filter a VCF to only chromosome 21:","type":"SimpleText"}]},{"lang":"bash","snippet":"cat test.vcf | ./bin/gngs 'VCF.filter { it.chr == \"chr21\" }' > test.chr21.vcf\n","lineNumber":"","type":"Snippet"}]},{"id":"interactively-via-a-groovy-shell","title":"Interactively via a Groovy Shell","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can run Groovy NGS as a ","type":"SimpleText"},{"url":"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop","isFile":false,"type":"Link","content":[{"text":"REPL","type":"SimpleText"}]},{"text":" to run commands","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"interactively and see the results using the standard Groovy Shell. To facilitate this, there is a script in the ","type":"SimpleText"},{"code":"bin","type":"InlinedCode"},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"folder to launch the Groovy Shell with Groovy NGS added to the classpath and the gngs package automatically imported. This","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be a very useful way to experiment and learn about how Groovy NGS and Groovy itself works.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Here is how an example session looks:","type":"SimpleText"}]},{"lang":"bash","snippet":"./bin/gngsh \nGroovy Shell (3.0.10, JVM: 11.0.18)\nType ':help' or ':h' for help.\n------------------------------------------------------------------------------------------------------\ngroovy:000> import gngs.*;\n===> gngs.*\ngroovy:000> vcf = VCF.parse('src/test/data/giab1.tiny.trio.vcf')\n===> VCF file src/test/data/giab1.tiny.trio.vcf for NA12877,NA12878,NA12879\ngroovy:000> vcf.size()\n===> 24\ngroovy:000> vcf.count { it.het }\n===> 20\n","lineNumber":"","type":"Snippet"}]},{"id":"in-a-jupyter-notebook","title":"In a Jupyter Notebook","type":"Section","content":[{"type":"Paragraph","content":[{"text":"A final way to use Groovy NGS is via Jupyter. You can use any available Groovy kernel, however a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"particularly useful one is ","type":"SimpleText"},{"url":"https://github.com/twosigma/beakerx","isFile":false,"type":"Link","content":[{"text":"BeakerX","type":"SimpleText"}]},{"text":" which provides Groovy","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"kernels out of the box along with a range of Jupyter widgets as enhancements. Together with Groovy NGS.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this makes a very effective data analysis platform for genomic data.","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383382,"tocItem":{"chapterTitle":"Chapter One","pageTitle":"How To Use Groovy NGS","pageMeta":{},"dirName":"chapter-one","fileName":"how-to-use-groovy-NGS","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"As a Dependency In Projects","id":"as-a-dependency-in-projects"},{"title":"On the Command Line","id":"on-the-command-line"},{"title":"Interactively via a Groovy Shell","id":"interactively-via-a-groovy-shell"},{"title":"In a Jupyter Notebook","id":"in-a-jupyter-notebook"}]}},{"type":"Page","content":[{"id":"regions-and-ranges","title":"Regions and Ranges","type":"Section","content":[{"type":"Paragraph","content":[{"text":"DNA is most commonly conceptualised as a set chromosomes or contigs represented","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by linear coordinate systems. Defining and manipulating spans within these","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"spaces is therefore been critical to working with genomic data. Entities such as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"genes, exons, transcripts, variants, and many similar constructs are usually","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"represented as coordinates within the genome, typically referred to as spans,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"ranges or regions. This section explains how to work with genomic regions in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Groovy-NGS.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Groovy itself provides interfaces and a small amount of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"native support for working with ranges of values, such as the ","type":"SimpleText"},{"url":"https://docs.groovy-lang.org/latest/html/api/groovy/lang/Range.htm","isFile":false,"type":"Link","content":[{"text":"Range","type":"SimpleText"}]},{"text":" class. Unfortunately this support is very minimal, so Groovy-NGS builds on these to provide full featured range operation support. In general, the terminology is used as follows:","type":"SimpleText"}]},{"id":"regions-and-ranges-terminology","level":2,"title":"Terminology","type":"SubHeading"},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Range","type":"SimpleText"}]},{"text":" : A contiguous sequence of genomic positions not qualfied by a contig / chromosome (defined by start and end position)","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Region","type":"SimpleText"}]},{"text":" : A range that is further associated with a specific sequence, ie: a chromosome, or contig. Operations treat Regions associated with different sequences as independent entities that do not interact.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Note: for historical reasons, Groovy-NGS uses ","type":"SimpleText"},{"code":"chr","type":"InlinedCode"},{"text":" to refer to the contig or chromosome with which a","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Region","type":"InlinedCode"},{"text":" is associated. For all intents and purposes, you may think of the ","type":"SimpleText"},{"code":"chr","type":"InlinedCode"},{"text":" as a contig, or even","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an abstract sequence name.","type":"SimpleText"}]},{"id":"regions-and-ranges-key-supporting-classes","level":2,"title":"Key Supporting Classes","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Formally, the key classes supporting range operations in Groovy-NGS are:","type":"SimpleText"}]},{"table":{"columns":[{"title":"Type"},{"title":"Description"}],"data":[[[{"type":"Paragraph","content":[{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/IRegion.html","isFile":false,"type":"Link","content":[{"text":"IRegion","type":"SimpleText"}]}]}],[{"type":"Paragraph","content":[{"text":"Core interface implemented by all data types that can interface with range operations - supports only contig and interval. Data types representing entities that are localisable to a specific position in the genome usually implement ","type":"SimpleText"},{"code":"IRegion","type":"InlinedCode"},{"text":" to specify their location.","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Region.html","isFile":false,"type":"Link","content":[{"text":"Region","type":"SimpleText"}]}]}],[{"type":"Paragraph","content":[{"text":"A region implementation that is also a groovy ","type":"SimpleText"},{"url":"https://docs.groovy-lang.org/latest/html/api/groovy/util/Expando.html","isFile":false,"type":"Link","content":[{"text":"expando","type":"SimpleText"}]},{"text":". This means that you can set your own properties directly on this object, allowing convenient association of meta data or ancilliary information to the region in data analysis.","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Regions.html","isFile":false,"type":"Link","content":[{"text":"Regions","type":"SimpleText"}]}]}],[{"type":"Paragraph","content":[{"text":"A collection of potentially overlapping ","type":"SimpleText"},{"code":"Region","type":"InlinedCode"},{"text":" objects, stored in indexed fashion for rapid lookup.","type":"SimpleText"}]}]]]},"title":"Range Data Types","anchorId":"regions-and-ranges-key-supporting-classes-range-data-types","type":"Table"},{"id":"regions-and-ranges-implementation","level":2,"title":"Implementation","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Under the hood, Groovy-NGS stores each range in a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object using an","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"index that enables efficient lookup. Unlike the commonly used approach of applying","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an ","type":"SimpleText"},{"url":"https://en.wikipedia.org/wiki/Interval_tree","isFile":false,"type":"Link","content":[{"text":"Interval Tree","type":"SimpleText"}]},{"text":", Groovy-NGS uses","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a boundary index. That is, when a new range is inserted, the two end points are inserted","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"into a tree map ordered on position, specific to the chromosome / contig. At places where","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the range overlaps existing ranges already in the index, breakpoint entries are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"inserted. In this way, every boundary is represented in the index, enabling O(1) lookup","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of which entries overlap a given position. This functionality is supported by the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/RangeIndex.html","isFile":false,"type":"Link","content":[{"text":"RangeIndex","type":"SimpleText"}]},{"text":" class.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: the breakpoint index design allows for extremely rapid local lookup, but","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"creates","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"some worst case performance outcomes you may wish to look out for. In particular,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the scenario where many small regions are inserted first and then a set of large regions","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are inserted after causes the insertion operation to become O(N) on the number","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of small regions. Now that HTSJDK offers a native","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/samtools/util/IntervalTree.html","isFile":false,"type":"Link","content":[{"text":"IntervalTree","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"an implementation backed by this class may be considered to allow this worst","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"case to be avoided. If you encounter the worst case described here, using the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"HTSJDK ","type":"SimpleText"},{"code":"IntervalTree","type":"InlinedCode"},{"text":" class instead may be an option.","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383379,"tocItem":{"chapterTitle":"Chapter 2 Genomic Regions","pageTitle":"Regions And Ranges","pageMeta":{},"dirName":"chapter-2-genomic-regions","fileName":"regions-and-ranges","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Regions and Ranges","id":"regions-and-ranges"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"This section describes how to do a variety of common operations that are useful in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"analysing genomic data.","type":"SimpleText"}]},{"id":"creating-regions-objects","title":"Creating Regions Objects","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The first thing you need to do to work with regions is to create a ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Regions.html","isFile":false,"type":"Link","content":[{"text":"Regions","type":"SimpleText"}]},{"text":" object.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"One way to do this is \"by hand\" - ie: by manually constructing ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Region.html","isFile":false,"type":"Link","content":[{"text":"Region","type":"SimpleText"}]},{"text":" objects.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"You can do this by passing a region defined as a string using the standard format to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"Region","type":"InlinedCode"},{"text":" constructor, for example:","type":"SimpleText"}]},{"lang":"groovy","snippet":"r = new Region('chr1:100-200')\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Then you can convert a list of these to a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object using the Groovy ","type":"SimpleText"},{"code":"as","type":"InlinedCode"},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"operator. For example, consider the following set of regions:","type":"SimpleText"}]},{"lang":"","snippet":"          A\n|--------------------|\n      B       C            D\n    |---|   |---|        |---|\n0   5   10  15  20   25  30  35\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To create a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object representing these directly, we can use the following code:","type":"SimpleText"}]},{"lang":"groovy","snippet":"regions = [\n              'chr1:5-10', 'chr1:15-20', 'chr1:30-35', 'chr1:0-25'\n          ].collect { \n              new Region(it) \n          } as Regions\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Observe that in this set of example regions we have overlapping ranges. In","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"general, Groovy-NGS does not automatically combine or merge regions, and the resulting","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"Regions","type":"InlinedCode"},{"text":" object behaves much like a simple collection of the regions you put in, only","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with some operations accelerated. If you desire that the regions be combined, you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"need to use one of the specific operations to do that after creating your ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object.","type":"SimpleText"}]}]},{"id":"basic-metrics","title":"Basic Metrics","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Some simple metrics you might like to know about your set of include:","type":"SimpleText"}]},{"table":{"columns":[{"title":"Description","align":"left"},{"title":"Code","align":"left"},{"title":"Output","align":"left"}],"data":[[[{"text":"the total span of all the ranges included","type":"SimpleText"}],[{"code":"regions.size()","type":"InlinedCode"}],[{"code":"44","type":"InlinedCode"}]],[[{"text":"the count of the number of ranges included","type":"SimpleText"}],[{"code":"regions.numberOfRanges","type":"InlinedCode"}],[{"code":"4","type":"InlinedCode"}]]]},"type":"Table"},{"type":"Paragraph","content":[{"text":"Note: the use of ","type":"SimpleText"},{"code":"size()","type":"InlinedCode"},{"text":" slightly conflicts with the standard Groovy semantics","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for the ","type":"SimpleText"},{"code":"size()","type":"InlinedCode"},{"text":" method as this would normally return the number of elements in a collection. Instead, you can think of this as returning the total number of bases","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in the collection.","type":"SimpleText"}]}]},{"id":"treating-as-a-collection","title":"Treating as a Collection","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object implements standard Java and Groovy interfaces and methods to enable","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"common collections operations. In particular, the ","type":"SimpleText"},{"url":"https://docs.groovy-lang.org/latest/html/groovy-jdk/java/lang/Iterable.html","isFile":false,"type":"Link","content":[{"text":"Iterable","type":"SimpleText"}]},{"text":" interface is implemented so that the full range of Groovy","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"enhanced operations for collections are available. These operations are extremely powerful and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"often allow you to accomplish complex data analysis tasks with just a few lines of chained","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"declarative invocations. When used as an ","type":"SimpleText"},{"code":"Iterable","type":"InlinedCode"},{"text":", the ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" class will","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"span across all chromosomes / contigs. If you want to operate at the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"chromosome/contig level, you can consider using the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Regions.html#index","isFile":false,"type":"Link","content":[{"text":"index","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"attribute to access the per-chromosome index which also supports the Iterable interface.","type":"SimpleText"}]},{"id":"treating-as-a-collection-indexed-access","level":2,"title":"Indexed Access","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"For accessing subsets of regions within a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object, specific support is provided to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"allow lookup using \"square bracket\" notation efficient. Therefore, for example, to access","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the 2nd and 3rd regions of our set, the following code will work:","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"regions[1..2]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"","snippet":"[chr1:15-20, chr1:30-35]\n","lineNumber":"","type":"Snippet"}]},{"id":"finding-overlaps","title":"Finding Overlaps","type":"Section","content":[{"type":"Paragraph","content":[{"text":"One of the most common needs is to find which regions overlap a given interval. Generally,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the most practical method to use for this is the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Regions.html#getOverlapRegions(gngs.IRegion)","isFile":false,"type":"Link","content":[{"text":"getOverlapRegions","type":"SimpleText"}]},{"text":" method. This method will return a list of the regions from the set that have at least","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"1 base of overlap with the region that is specified.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Example: to find which regions overlap the range 12 to 30:","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]},{"text":":","type":"SimpleText"}]},{"lang":"groovy","snippet":"r = new Region('chr1:12-30')\noverlaps = regions.getOverlapRegions(r)\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]},{"text":":","type":"SimpleText"}]},{"lang":"","snippet":"[chr1:0-25, chr1:15-20, chr1:30-35]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: the ","type":"SimpleText"},{"code":"getOverlapRegions","type":"InlinedCode"},{"text":" method returns a ","type":"SimpleText"},{"code":"List","type":"InlinedCode"},{"text":" object rather than a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Therefore in this case, the ","type":"SimpleText"},{"code":".size()","type":"InlinedCode"},{"text":" method returns the number of elements, not the total","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"span of all the regions contains. In general, you will find Groovy NGS returns","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"plain collections as a result of its methods, which you can then choose to convert into","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object by adding ","type":"SimpleText"},{"code":"as Regions","type":"InlinedCode"},{"text":" if that is what you need.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Groovy NGS interprets region boundaries as ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"inclusive","type":"SimpleText"}]},{"text":". This means that the region","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"chr1:0-10","type":"InlinedCode"},{"text":" includes the position 10 and does overlap the region ","type":"SimpleText"},{"code":"chr1:10-20","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: There are several other ","type":"SimpleText"},{"code":"getOverlaps","type":"InlinedCode"},{"text":" methods. These can be slightly more efficient, in specific circumstances.","type":"SimpleText"}]}]},{"id":"intersection","title":"Intersection","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Intersection finds the shared parts of each region in your set with another region that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you specify. To this, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Regions.html#intersectRegion(gngs.Region)","isFile":false,"type":"Link","content":[{"text":"intersectRegion","type":"SimpleText"}]},{"text":" method.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"ix = regions.intersectRegion(r)\nix*.toString()\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"[chr1:12-25, chr1:15-20, chr1:30-30]\n","lineNumber":"","type":"Snippet"}]},{"id":"flattening","title":"Flattening","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In many types of analysis, you desire to know only the total set of regions encompassed","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by an overlapping set. Groovy-NGS mirrors the R-lang terminology here, offering a ","type":"SimpleText"},{"code":"reduce","type":"InlinedCode"},{"type":"SoftLineBreak"},{"text":"function to flatten a set of regions to an equivalent set where all overlaps are compressed","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"to a single region.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"regions.reduce()*.toString()\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"","snippet":"[chr1:0-25, chr1:30-35]\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This has changed the ranges to the following:","type":"SimpleText"}]},{"lang":"","snippet":"|--------------------|   |---|\n0   5   10  15  20   25  30  35\n","lineNumber":"","type":"Snippet"}]},{"id":"assigning-properties","title":"Assigning Properties","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In analysing genomic data we usually are interested in specific attributes of the regions we are","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"working with. For example, the genes they represent, statistics about their attributes or any arbitrary","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"data that we associate with the region for the purpose of the analysis. It is very convenient therefore to be able to attach metadata to each region so that these are available at any point","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"they are needed in analysis.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The Groovy-NGS","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Region.html","isFile":false,"type":"Link","content":[{"text":"Region","type":"SimpleText"}]},{"text":" class","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"extends the Groovy","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Region.html","isFile":false,"type":"Link","content":[{"text":"Expando","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"class which allows you to set arbitrary properties on the object alongside the properties","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that the class natively supports. For example:","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"regions[0].foo = 'bar'\nregions[1].foo = 'baz'\nregions[2].foo = 'boo'\nregions[3].foo = 'boz'\n\nregions.each { r ->\n    println \"The region $r has foo = $r.foo\"\n}\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"","snippet":"The region chr1:5-10 has foo = bar\nThe region chr1:15-20 has foo = baz\nThe region chr1:30-35 has foo = boo\nThe region chr1:0-25 has foo = boz\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"There are some important caveats with using this feature:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"you should ensure the properties assigned don't clash with native property names. In such cases,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which property is accessed may be ambiguous.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"some operations on ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" objects that modify the regions will lose the metadata","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"because they return new ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" objects. If you want to re-associate the metadata","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"you may have to do this manually (for example, by using ","type":"SimpleText"},{"code":"findOverlapRegions","type":"InlinedCode"},{"text":" or similar.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1754207383379,"tocItem":{"chapterTitle":"Chapter 2 Genomic Regions","pageTitle":"Common Operations","pageMeta":{},"dirName":"chapter-2-genomic-regions","fileName":"common-operations","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Creating Regions Objects","id":"creating-regions-objects"},{"title":"Basic Metrics","id":"basic-metrics"},{"title":"Treating as a Collection","id":"treating-as-a-collection"},{"title":"Finding Overlaps","id":"finding-overlaps"},{"title":"Intersection","id":"intersection"},{"title":"Flattening","id":"flattening"},{"title":"Assigning Properties","id":"assigning-properties"}]}},{"type":"Page","content":[{"id":"loading-bed-files","title":"Loading BED files","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Regions are commonly loaded from and saved to BED files. Groovy NGS provides the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/BED.html","isFile":false,"type":"Link","content":[{"text":"BED","type":"SimpleText"}]},{"text":" class to read data","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"from BED formatted files.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The BED class is designed to work with both in-memory BED files and also provide a subset of","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"operations that can work in streaming fashion with files on storage. Therefore its constructor","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"accepts a file path but will not load the contents automatically. To load a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object into","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"memory from a BED file, use the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/BED.html#load(java.util.Map)","isFile":false,"type":"Link","content":[{"text":"load","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"method. Consider this bed file:","type":"SimpleText"}]},{"lang":"text","snippet":"chr1\t100\t150  r1\nchr2\t190\t250  r2\nchr3\t300\t350  r3\n","lineNumber":"","title":"test.bed","anchorId":"loading-bed-files-test-bed","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Then we can load it to a regions object with:","type":"SimpleText"}]},{"lang":"groovy","snippet":"bed = new BED(\"test.bed\").load()\nassert bed.numberOfRanges == 3\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This will load a minimalist version of the BED that does not include the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"fourth column (usually referred to as the ","type":"SimpleText"},{"code":"name","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"id","type":"InlinedCode"},{"text":" column in the BED file).","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This  is designed to minimise memory use and the resultant ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"does not support the assignment of additional properties. To load a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"fully functional ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object, add the ","type":"SimpleText"},{"code":"full:true","type":"InlinedCode"},{"text":" optional parameter","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in either the constructor or the ","type":"SimpleText"},{"code":"load","type":"InlinedCode"},{"text":" function:","type":"SimpleText"}]},{"lang":"groovy","snippet":"bed = new BED(\"test.bed\", full:true).load()\nassert bed.numberOfRanges == 3\nassert bed[0].id == \"r1\"\n","lineNumber":"","type":"Snippet"}]},{"id":"saving-bed-files","title":"Saving BED files","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To save data in BED format from a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Regions.html#save(java.lang.String)","isFile":false,"type":"Link","content":[{"text":"Regions.save","type":"SimpleText"}]},{"text":" method on the ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"By default, this will save the regions in the order they were loaded, without any additional","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"columns. To add the ","type":"SimpleText"},{"code":"id","type":"InlinedCode"},{"text":"/","type":"SimpleText"},{"code":"name","type":"InlinedCode"},{"text":" column as the fourth column, specify a closure that returns the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"value to store there using the ","type":"SimpleText"},{"code":"extra","type":"InlinedCode"},{"text":" attribute. For example, to save the above BED file","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"with the same contents to a new file name, you would use:","type":"SimpleText"}]},{"lang":"groovy","snippet":"bed.save('test2.bed', extra: { it.id })\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"It's common to want to save regions in sorted order (eg: so that the file can be indexed). To do this,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"supply the ","type":"SimpleText"},{"code":"sorted","type":"InlinedCode"},{"text":" attribute. If you supply the value ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":" then the file will be written","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in sorted order using lexical sorting on the contig/chromosome name. This means that ","type":"SimpleText"},{"code":"chr10","type":"InlinedCode"},{"text":" will follow","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"directly after ","type":"SimpleText"},{"code":"chr1","type":"InlinedCode"},{"text":".  You can sort in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a custom order by setting the ","type":"SimpleText"},{"code":"sorted","type":"InlinedCode"},{"text":" attribute to your own implementation of a ","type":"SimpleText"},{"code":"Comparator<Region>","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If you would like to store chromosomes in genomic order (ie: ","type":"SimpleText"},{"code":"chr2","type":"InlinedCode"},{"text":" follows ","type":"SimpleText"},{"code":"chr1","type":"InlinedCode"},{"text":"), Groovy NGS provides","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/NumericRegionComparator.html","isFile":false,"type":"Link","content":[{"text":"NumericRegionComparator","type":"SimpleText"}]},{"text":" class","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that you can use. For example:","type":"SimpleText"}]},{"lang":"groovy","snippet":"bed.save('test2.bed', extra: { it.id }, sorted: new NumericRegionComparator())\n","lineNumber":"","type":"Snippet"}]},{"id":"region-based-data-tables","title":"Region Based Data Tables","type":"Section","content":[{"type":"Paragraph","content":[{"text":"It is common to encounter files stored in column based format (for example,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"tab separated) with genomic coordinates in some of the columns and other data","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in the remaining columns.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To load this kind of data, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/RangedData.html","isFile":false,"type":"Link","content":[{"text":"RangedData","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"class. This class expects a tab or comma separated file with headers defining the column names. The class","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"will auto-detect data types for columns based on the contents of the first rows (numeric columns being","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"parsed as numbers). By default the first 3 columns are interpreted as the contig / chromosome, start","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"coordinate and end coordinate repsectively. However you can change this by providing the column indices","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for these in the constructor.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Consider the following file:","type":"SimpleText"}]},{"lang":"text","snippet":"chr\tstart\tend\tname\tage\nchr1\t100\t120\tsimon\t10\nchr1\t140\t210\tfred\t15\nchr1\t190\t250\tjane\t20\nchr1\t300\t350\ttom\t13\n","lineNumber":"","title":"test.tsv","anchorId":"region-based-data-tables-test-tsv","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We can load a ","type":"SimpleText"},{"code":"Regions","type":"InlinedCode"},{"text":" object with ","type":"SimpleText"},{"code":"name","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"age","type":"InlinedCode"},{"text":" populated as follows:","type":"SimpleText"}]},{"lang":"","snippet":"regions = new RangedData(\"test.tsv\").load()\n\nassert r[0].name == \"simon\"\nassert r[0].age == 10\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"For more details, see the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/RangedData.html","isFile":false,"type":"Link","content":[{"text":"RangedData","type":"SimpleText"}]},{"text":" class","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"API documentation.","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383379,"tocItem":{"chapterTitle":"Chapter 2 Genomic Regions","pageTitle":"Loading And Saving","pageMeta":{},"dirName":"chapter-2-genomic-regions","fileName":"loading-and-saving","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Loading BED files","id":"loading-bed-files"},{"title":"Saving BED files","id":"saving-bed-files"},{"title":"Region Based Data Tables","id":"region-based-data-tables"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Groovy NGS provides a dedicated VCF parser designed to offer highly streamlined access to VCF","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"information, via the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/VCF.html","isFile":false,"type":"Link","content":[{"text":"gngs.VCF","type":"SimpleText"}]},{"text":" class.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"This parser allows access to key header properties as well as full information about variants.","type":"SimpleText"}]},{"id":"loading-a-vcf-file","title":"Loading a VCF File","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To load a VCF into memory, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/VCF.html#parse(Closure)","isFile":false,"type":"Link","content":[{"text":"VCF.parse","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"static method. This method accepts a closure which, if provided, is called for each variant to determine if the variant","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"should be retained. This allows loading a subset of variants from a VCF. For example, here we load","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only variants on chromosome 22.","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"vcf = VCF.parse(\"test.vcf\") {\n   it.chr == 'chr22'\n}\nprintln \"The samples are: $vcf.samples\"\nprintln \"There are ${vcf.size()} variants on chr22\"\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"The samples are: [NA12877, NA12878, NA12879]\nThere are 24 variants on chr22\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"id":"accessing-header-information-only","title":"Accessing Header Information Only","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If access to the variant information is not required, you can avoid parsing the whole VCF by calling","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the constructor directly:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"vcf = new VCF(\"test.vcf\")\nprintln \"The samples are: $vcf.samples\"\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"The samples are: [NA12877, NA12878, NA12879]\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"id":"streaming-processing","title":"Streaming Processing","type":"Section","content":[{"type":"Paragraph","content":[{"text":"For large VCFs it can be beneficial to process a VCF file line by line. In this case, the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/VCF.html#filter(java.lang.String,%20Closure)","isFile":false,"type":"Link","content":[{"text":"VCF.filter","type":"SimpleText"}]},{"text":" method","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be used to process variants in streaming fashion. By default, the ","type":"SimpleText"},{"code":"filter","type":"InlinedCode"},{"text":" method reads from standard","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"input and writes to standard output, but a file names can be provided to read from a file.","type":"SimpleText"}]},{"lang":"groovy","snippet":"VCF.filter('test.vcf') {\n   it.chr == 'chr22' // output only variants on chr22 to stdout\n}\n","lineNumber":"","type":"Snippet"}]},{"id":"processing-variants-in-vcfs","title":"Processing Variants in VCFs","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Each variant is represented by an instance of the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Variant.html","isFile":false,"type":"Link","content":[{"text":"gngs.Variant","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"class which makes available detailed information about the variant. The ","type":"SimpleText"},{"code":"VCF","type":"InlinedCode"},{"text":" class  implements the ","type":"SimpleText"},{"code":"Iterable<Variant>","type":"InlinedCode"},{"text":" interface,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"making available standard operations that are available on all Groovy ","type":"SimpleText"},{"url":"https://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/Iterator.html","isFile":false,"type":"Link","content":[{"text":"Iterators","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"vcf = VCF.parse(\"test.vcf\").countBy { it.type }\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"{SNP=22, DEL=1, INS=1}\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"id":"indexed-vcfs","title":"Indexed VCFs","type":"Section","content":[{"type":"Paragraph","content":[{"text":"When accessing a small number of variants from a large VCF, it is more efficient to index the VCF and parse","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only the relevant lines. The ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/VCFIndex.html","isFile":false,"type":"Link","content":[{"text":"gngs.VCFIndex","type":"SimpleText"}]},{"text":" class","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be used to query variants within a specified genomic region.","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"index = new VCFIndex(\"test.vcf.gz\")\nindex.iterator(\"chr1\", 13792200, 13792300).collect { it }\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"[chr1:13792284 G/T]\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]}],"lastModifiedTime":1754207383379,"tocItem":{"chapterTitle":"Chapter 3 Vcf Files","pageTitle":"Parsing Vcf Files","pageMeta":{},"dirName":"chapter-3-vcf-files","fileName":"parsing-vcf-files","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Loading a VCF File","id":"loading-a-vcf-file"},{"title":"Accessing Header Information Only","id":"accessing-header-information-only"},{"title":"Streaming Processing","id":"streaming-processing"},{"title":"Processing Variants in VCFs","id":"processing-variants-in-vcfs"},{"title":"Indexed VCFs","id":"indexed-vcfs"}]}},{"type":"Page","content":[{"id":"general-notes","title":"General Notes","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Variants are one of the core focuses of many genomic analysis, so Groovy NGS goes to significant effort to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"streamline and optimise access to variant information. This is one of the exceptions where,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"even though HTSJDK does provide a ","type":"SimpleText"},{"url":"https://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/variant/variantcontext/VariantContext.html","isFile":false,"type":"Link","content":[{"text":"VariantContext","type":"SimpleText"}]},{"text":" class,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Groovy NGS provides a different, substitute class as a complementary option. This is because  HTSJDK focuses on completely","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"representing all features from the VCF specification and also ensuring high levels of safety and robustness in how it is used.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Groovy NGS, therefore, provides an alternative that is highly ergonomic, but makes some important simplifiying assumptions and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"only presents a commonly used subset of the VCF specification.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The most important simplifying assumption is that many operations, there is a \"simple\" version that returns results for the first","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"allele and / or the first sample in a VCF. This assumption means that many analyses where these assumptions hold true","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be expressed with vastly simpler code and especially for interactive analyses (such as in Jupyter Notebooks), this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"adds a great level of convenience.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Warning: you may miss variants when using default methods with multi-allelic variants. In general, you should","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"apply Groovy NGS classes to VCFs that have been \"normalised\" and reduced to primitives, for example, by using","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://samtools.github.io/bcftools/bcftools.html#norm","isFile":false,"type":"Link","content":[{"text":"bcftools norm","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]}]},{"id":"variant-properties","title":"Variant Properties","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The key class for working with variants in Groovy NGS is the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Variant.html","isFile":false,"type":"Link","content":[{"text":"Variant","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"class. Conceptually, this class represents a single line in a VCF file, and hence it can include multiple alleles","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and multiple samples at a single site.","type":"SimpleText"}]},{"id":"variant-properties-alleles","level":2,"title":"Alleles","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The base sequence of default alternate allele is accessible as the ","type":"SimpleText"},{"code":"alt","type":"InlinedCode"},{"text":" property. This value is exactly","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as presented in the first element of the ALT column from the VCF file. Therefore, for indels it includes","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the context base that is generally present for those variant types. The full list of alternate allele","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"bases is accessible via the ","type":"SimpleText"},{"code":"alts","type":"InlinedCode"},{"text":" property.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"These properties tell you only the base sequence of the allele. For more information, you can access","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a full list of ","type":"SimpleText"},{"code":"Allele","type":"InlinedCode"},{"text":" objects as the ","type":"SimpleText"},{"code":"alleles","type":"InlinedCode"},{"text":" property. These allow you to directly query","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the type of the variant, start and end position and other attributes.","type":"SimpleText"}]},{"id":"variant-properties-dosage","level":2,"title":"Dosage","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"GNGS refers to the number of copies of a variant that are present as the ","type":"SimpleText"},{"code":"dosage","type":"InlinedCode"},{"text":". Therefore, in a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"diploid genome, having genotype ","type":"SimpleText"},{"code":"1/1","type":"InlinedCode"},{"text":" will yield a dosage of ","type":"SimpleText"},{"code":"2","type":"InlinedCode"},{"text":" for the alternate allele, while","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"having genotype ","type":"SimpleText"},{"code":"1/0","type":"InlinedCode"},{"text":" will give dosage of 1. This generally makes calculations more straightforward","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"than dealing with the exact genotype, especially when accessing the dosage for the first sample and","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"allele (directly as the ","type":"SimpleText"},{"code":"dosage","type":"InlinedCode"},{"text":" property).","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To see the dosage of the default allele for every sample, you can query the ","type":"SimpleText"},{"code":"dosages","type":"InlinedCode"},{"text":" property.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"For example assuming the proband is the first sample in a trio VCF, we can identify de novo variants","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as follows:","type":"SimpleText"}]},{"lang":"groovy","snippet":"vcf.grep {\n    it.dosages[0] > 0 && it.dosages[1]==0 && it.dosages[2] == 0\n}\n","lineNumber":"","type":"Snippet"},{"id":"variant-properties-depth","level":2,"title":"Depth","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The total read depth at the site of a variant can be queried using the ","type":"SimpleText"},{"code":"totalDepth","type":"InlinedCode"},{"text":" property. To","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"get the depth of the first allele, you may query the ","type":"SimpleText"},{"code":"altDepth","type":"InlinedCode"},{"text":" property. To see the alternate","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"allele depths for other alleles,  you can call ","type":"SimpleText"},{"code":"getAlleleDepths(alleleIndex)","type":"InlinedCode"},{"text":" where providing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"0 specifies the reference allele.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Often we are interested in the proportion of reads supporting a variant (refererred to as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"code":"variant allele frequency","type":"InlinedCode"},{"text":". This is returned as the ","type":"SimpleText"},{"code":"vaf","type":"InlinedCode"},{"text":" property for the default","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"allele and sample. To query it for arbitrary alelel and sample, call the","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Variant.html#getVaf(int,%20int)","isFile":false,"type":"Link","content":[{"text":"getVaf(alleleIndex, sampleIndex)","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"method.","type":"SimpleText"}]}]},{"id":"variants-as-regions","title":"Variants as Regions","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Like other entities that belong to a specific location in the genome, Variants implement the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"IRegion","type":"InlinedCode"},{"text":" interface which allows variants to be passed to many functions for region based","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"operations as a parameter.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, to test if a particular variant lies within a region of interest:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"roi = new Region(\"chr22:16591390-16591800\")\nprintln(\"Does variant $v overlap $roi? : \" + roi.overlaps(v))\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"Does variant chr22:16591593 A/G overlap chr22:16591390-16591800? : true\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"id":"querying-vcfs-for-presence-of-variants","title":"Querying VCFs for Presence of Variants","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Finding out whether a particular variant is contained in a VCF is easy because the ","type":"SimpleText"},{"code":"VCF","type":"InlinedCode"},{"text":" class implements","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the Groovy ","type":"SimpleText"},{"url":"https://groovy-lang.org/operators.html#_membership_operator","isFile":false,"type":"Link","content":[{"text":"membership operator","type":"SimpleText"}]},{"text":" which enables","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"use of the ","type":"SimpleText"},{"code":"in","type":"InlinedCode"},{"text":" keyword. Hence we can query if a VCF contains a particular variant by using code such as:","type":"SimpleText"}]},{"lang":"groovy","snippet":"vcf = VCF.parse('test.vcf')\nvariant = vcf[0]\nif(variant in vcf)\n    println \"Variant $variant is in the VCF!\"\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: in testing whether a variant is \"in\" a VCF, the position and allele are compared. However, the dosage (zygosity)","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"are not compared. Therefore, querying if a homozygous variant is present in a VCF that contains the VCF in heterozygous form","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"will return ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":". In fact, even if the variant is present but genotyped as homozygous reference, the query will return ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":".","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"To ascertain whether any sample has non-zero dosage for the variant, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/VCF.html#find(gngs.Variant)","isFile":false,"type":"Link","content":[{"text":"find","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"to retrieve the variant and then directly query the dosages. For example: ","type":"SimpleText"},{"code":"vcf.find(v).dosages.any { it > 0 }","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"Warning: this function may behave in unexpected ways when multi-allelic variants are used as query or target VCF. The","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"find","type":"InlinedCode"},{"text":"  and ","type":"SimpleText"},{"code":"in","type":"InlinedCode"},{"text":" functions will match a variant in a VCF if ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"any","type":"SimpleText"}]},{"text":" allele matches ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"any","type":"SimpleText"}]},{"text":" allele in the query.","type":"SimpleText"}]}]},{"id":"info-fields","title":"Info Fields","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Info fields for each ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Variant.html","isFile":false,"type":"Link","content":[{"text":"Variant","type":"SimpleText"}]},{"text":" are parsed and accessible as","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a ","type":"SimpleText"},{"code":"Map","type":"InlinedCode"},{"text":" keyed on the name. Values are represented as ","type":"SimpleText"},{"code":"String","type":"InlinedCode"},{"text":"s and are ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"not","type":"SimpleText"}]},{"text":" further parsed into typed entities matching the ","type":"SimpleText"},{"code":"INFO","type":"InlinedCode"},{"text":" fields declared in the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"VCF header.","type":"SimpleText"}]}]},{"id":"annotated-variants","title":"Annotated Variants","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Variant.html","isFile":false,"type":"Link","content":[{"text":"Variant","type":"SimpleText"}]},{"text":" class has built in support for parsing","type":"SimpleText"},{"type":"SoftLineBreak"},{"url":"https://asia.ensembl.org/info/docs/tools/vep/index.html","isFile":false,"type":"Link","content":[{"text":"VEP","type":"SimpleText"}]},{"text":" annotations. These are accessed via the","type":"SimpleText"},{"type":"SoftLineBreak"},{"code":"vepInfo","type":"InlinedCode"},{"text":" property. As VEP can create multiple annotations, the result is returned as a ","type":"SimpleText"},{"code":"List","type":"InlinedCode"},{"text":", each entry which is","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"a ","type":"SimpleText"},{"code":"Map<String,Object>","type":"InlinedCode"},{"text":" of VEP annotations.","type":"SimpleText"}]}]},{"id":"updating-variant-attributes","title":"Updating Variant Attributes","type":"Section","content":[{"type":"Paragraph","content":[{"text":"GNGS contains limited support for updating variants, allowing a variant that has been read from a VCF file to be modified","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and then written out with the changes intact. Due to how ","type":"SimpleText"},{"code":"Variant","type":"InlinedCode"},{"text":" entries are stored, it is critical that when","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"updating a variant the update is performed within a ","type":"SimpleText"},{"code":"update","type":"InlinedCode"},{"text":" closure:","type":"SimpleText"}]},{"lang":"groovy","snippet":"v.update {\n    v.info.MYINFO = \"a new INFO property\"\n}\n","lineNumber":"","title":"Updating a Variant to add an INFO property","anchorId":"updating-variant-attributes-updating-a-variant-to-add-an-info-property","type":"Snippet"},{"type":"Paragraph","content":[{"text":"When updated this way, changes to INFO and genotype fields will be written out if made as part of a ","type":"SimpleText"},{"code":"filter","type":"InlinedCode"},{"text":" operation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"or the VCF is written using the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/VCF.html#print(java.lang.Appendable)","isFile":false,"type":"Link","content":[{"text":"print","type":"SimpleText"}]},{"text":" method.","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383379,"tocItem":{"chapterTitle":"Chapter 3 Vcf Files","pageTitle":"Working With Variants","pageMeta":{},"dirName":"chapter-3-vcf-files","fileName":"working-with-variants","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"General Notes","id":"general-notes"},{"title":"Variant Properties","id":"variant-properties"},{"title":"Variants as Regions","id":"variants-as-regions"},{"title":"Querying VCFs for Presence of Variants","id":"querying-vcfs-for-presence-of-variants"},{"title":"Info Fields","id":"info-fields"},{"title":"Annotated Variants","id":"annotated-variants"},{"title":"Updating Variant Attributes","id":"updating-variant-attributes"}]}},{"type":"Page","content":[{"id":"introduction","title":"Introduction","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Sequence alignments are central to working with genomic data. Groovy NGS supplies a wrapper class","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"that adds idiomatic Groovy constructs to the underlying HTSJDK and Picard classes that provide","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"Java support for working with genomic data. Unlike the support for genomic regions, this layer","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"is a relatively thin wrapper since HTSJDK already provides a very effective API.","type":"SimpleText"}]}]},{"id":"opening-bam-and-cram-files","title":"Opening BAM and CRAM Files","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The core class for interacting with alignment files is the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/SAM.html","isFile":false,"type":"Link","content":[{"text":"SAM","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"class. This class ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"only","type":"SimpleText"}]},{"text":" works with indexed BAM, CRAM or SAM files. It provides a wealth of functions that allow","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"highly efficient, streamlined access to reads within these formats.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To create a ","type":"SimpleText"},{"code":"SAM","type":"InlinedCode"},{"text":" object, just use the constructor:","type":"SimpleText"}]},{"lang":"groovy","snippet":"bam = new SAM(\"test.bam\")\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To see which contigs are in the file, you can access the ","type":"SimpleText"},{"code":"contigs","type":"InlinedCode"},{"text":" property:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"bam.contigs\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"chrM=16571\nchr1=249250621\nchr2=243199373\nchr3=198022430\n...\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"To see which samples are in an alignment file, use the ","type":"SimpleText"},{"code":"samples","type":"InlinedCode"},{"text":" property:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"bam.samples\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"[NA12878, NA12878]\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"Note that each sample may be returned multiple times if there is more than one read group for the sample","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in the alignment file.","type":"SimpleText"}]}]},{"id":"accessing-reads","title":"Accessing Reads","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Reads within the ","type":"SimpleText"},{"code":"SAM","type":"InlinedCode"},{"text":" file are accessed using several different methods. The right method depends on","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"whether you want to access reads from a specific region","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"if you need access to both pairs of paired end reads at the same time","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"For basic access, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/SAM.html#eachRecord(java.util.Map,%20groovy.lang.Closure)","isFile":false,"type":"Link","content":[{"text":"eachRecord","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"method to iterate over every read in the SAM file, one at a time:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"count = 0\nbam.eachRecord { ++count }\nprintln \"There are $count reads in the file\"\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"There are 1899 reads in the file\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"Within the closure, a ","type":"SimpleText"},{"url":"https://www.javadoc.io/doc/com.github.samtools/htsjdk/1.133/htsjdk/samtools/SAMRecord.html","isFile":false,"type":"Link","content":[{"text":"SAMRecord","type":"SimpleText"}]},{"text":" object is passed","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as an argument and all of its properties are accessible.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, the maximum insert size could be calculated using the ","type":"SimpleText"},{"code":"inferredInsertSize","type":"InlinedCode"},{"text":" property of each ","type":"SimpleText"},{"code":"SAMRecord","type":"InlinedCode"},{"text":" object:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"maxInsertSize = 0\nbam.eachRecord { r ->\n    maxInsertSize = Math.max(maxInsertSize, Math.abs(r.inferredInsertSize))\n}\nprintln \"The maximum insert size is $maxInsertSize\"\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"The maximum insert size is 114074\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"While ","type":"SimpleText"},{"code":"eachRecord","type":"InlinedCode"},{"text":" is a simple method, often a more idiomatic and functional style is achievable","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"by using the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/SAM.html#withIterator(groovy.lang.Closure)","isFile":false,"type":"Link","content":[{"text":"withIterator","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"which makes available a Groovy ","type":"SimpleText"},{"url":"https://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/Iterator.html","isFile":false,"type":"Link","content":[{"text":"Iterator","type":"SimpleText"}]},{"text":", affording","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"all of the usual Groovy enhancements that are available on iterator objects.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, the same can be achieved with an iterator like so:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"bam.withIterator { it*.inferredInsertSize.max() }\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"114074\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"id":"accessing-reads-accessing-reads-from-a-specific-locus","level":2,"title":"Accessing reads from a specific locus","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"To access reads from a given locus, you can supply a ","type":"SimpleText"},{"code":"Region","type":"InlinedCode"},{"text":" object as a parameter to the ","type":"SimpleText"},{"code":"withIterator","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"eachRecord","type":"InlinedCode"},{"text":" methods to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"specify the region.","type":"SimpleText"}]}]},{"id":"accessing-paired-reads","title":"Accessing Paired Reads","type":"Section","content":[{"type":"Paragraph","content":[{"text":"It is often useful to access reads in their pairs. However, within coordinate sorted alignment files, paired reads","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"may be spaced far apart which makes retrieval of the mate for each read potentially very expensive. Groovy NGS offers","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"an optimised method, ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/SAM.html#eachPair(groovy.lang.Closure)","isFile":false,"type":"Link","content":[{"text":"eachPair","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"count = 0\nbam.eachPair { r1, r2 -> ++count}\nprintln \"There are $count read pairs\"\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"There are 942 read pairs\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"Note: accessing read pairs can be memory intensive, as each read is buffered until its mate is found. Unpaired reads","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"will not be output.","type":"SimpleText"}]}]},{"id":"generating-pileups","title":"Generating Pileups","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Genomic data often contains many reads covering any one position and it is of interest to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"access the full set of reads covering the position (known as a \"pileup\"). Groovy NGS offers several","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"methods on the ","type":"SimpleText"},{"code":"SAM","type":"InlinedCode"},{"text":" class as well as a dedicated ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Pileup.html","isFile":false,"type":"Link","content":[{"text":"Pileup","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"class to make generating pileups easier.","type":"SimpleText"}]},{"id":"generating-pileups-pileup-at-a-specific-position","level":2,"title":"Pileup at a Specific Position","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"To generate a pileup at a specific position, use the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/SAM.html#pileup(java.lang.String,%20int)","isFile":false,"type":"Link","content":[{"text":"pileup","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"method. This returns a ","type":"SimpleText"},{"code":"Pileup","type":"InlinedCode"},{"text":" object that can then be queried for summary information as well as the full list of reads covering the position:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"p = bam.pileup('chr1',16890560)\nprintln \"There are ${p.alignments*.read.size()} reads at the position\"\nprintln \"There are ${p.summaryAsMap.C} C bases at the position\"\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"There are 3 reads at the position\nThere are 3 C bases at the position\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"From this we can see there are 3 reads which all have the base ","type":"SimpleText"},{"code":"C","type":"InlinedCode"},{"text":" at that position.","type":"SimpleText"}]},{"id":"generating-pileups-pileups-at-multiple-positions","level":2,"title":"Pileups at Multiple Positions","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Generating a pileup at a single position is very compute intensive as it requires fully scanning","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the context around the position to find all the reads. If you are analysing a whole region, you","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"should instead create a ","type":"SimpleText"},{"code":"PileupIterator","type":"InlinedCode"},{"text":" over the whole region using the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/SAM.html#pileup(java.lang.String,%20int,%20int)","isFile":false,"type":"Link","content":[{"text":"pileup(chr,start,end)","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"method. This will return an iterator that you can apply standard Groovy methods to enumerate the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"pileup state efficiently at each position within the range.","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"bam.pileup('chr1',16890550, 16890560 ).collect { p ->  p.alignments.size() }\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"id":"calculating-coverage-depth","title":"Calculating Coverage Depth","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As seen above, coverage can be calculated using the ","type":"SimpleText"},{"code":"pileup","type":"InlinedCode"},{"text":" method on the ","type":"SimpleText"},{"code":"SAM","type":"InlinedCode"},{"text":" class. There are several","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"direct methods for calculating coverage depth which are more efficient, however, including some that","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"directly compute statistics for you:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"bam.coverageStatistics('chr1',16890550, 16890560 ).mean\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"2.090909090909091\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"Note that the object returned is an Apache commons-math ","type":"SimpleText"},{"url":"https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/stat/descriptive/SummaryStatistics.html","isFile":false,"type":"Link","content":[{"text":"SummaryStatistics","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"object, allowing you to access any of its properties.","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383380,"tocItem":{"chapterTitle":"Chapter 4 Alignment Files","pageTitle":"Opening And Reading Alignment Files","pageMeta":{},"dirName":"chapter-4-alignment-files","fileName":"opening-and-reading-alignment-files","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Introduction","id":"introduction"},{"title":"Opening BAM and CRAM Files","id":"opening-bam-and-cram-files"},{"title":"Accessing Reads","id":"accessing-reads"},{"title":"Accessing Paired Reads","id":"accessing-paired-reads"},{"title":"Generating Pileups","id":"generating-pileups"},{"title":"Calculating Coverage Depth","id":"calculating-coverage-depth"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Visualisation of data is an extremely common task in working with genomic data. Unfortunately,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the libraries available for generating plots in Java are mostly geared towards","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"applications and are not as easy to use or feature rich for use with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"scientific data.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To ease plot generation, Groovy NGS includes the ","type":"SimpleText"},{"url":"https://github.com/eseifert/gral","isFile":false,"type":"Link","content":[{"text":"Gral","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"plotting library to support generation of plots by default, allowing any","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"APIs from this library to be called to  create visualisations. As with","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"many Java based plotting APIs however, it is not well integrated with data types","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"typically used in data analysis, requiring many API calls to generate a simple","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"plot. Groovy NGS therefore includes a set of wrappers that make generation","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"of useful plots directly from raw data very ergonomic. These APIs are based","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"around the plotting libraries supported in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the ","type":"SimpleText"},{"url":"https://github.com/twosigma/beakerx","isFile":false,"type":"Link","content":[{"text":"BeakerX JupyterLab Extenions","type":"SimpleText"}]},{"text":", allowing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"the same plots that are generated in notebooks to then be easily used offline in command","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"line applications.","type":"SimpleText"}]},{"id":"basic-form-of-plots","title":"Basic Form of Plots","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Plots are created by creating a ","type":"SimpleText"},{"code":"Plot","type":"InlinedCode"},{"text":" object:","type":"SimpleText"}]},{"lang":"groovy","snippet":"import gngs.plot.*\n\np = new Plot()\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Most attributes of the plots are passed using Groovy's ","type":"SimpleText"},{"url":"https://docs.groovy-lang.org/latest/html/documentation/#_named_parameters","isFile":false,"type":"Link","content":[{"text":"Map Constructor","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"idiom, such that plot-level features are mostly configured in the constructor by passing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"them as attributes. An example of a plot with title, axis labels and X and Y ranges set for the","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"plot area is as follows:","type":"SimpleText"}]},{"lang":"groovy","snippet":"p = new Plot(\n    title: 'An example plot',\n    xLabel: 'This is the x axis',\n    yLabel: 'This is the y axis',\n    xBound: [0, 10],\n    yBound: [0, 30]\n)\n","lineNumber":"","type":"Snippet"}]},{"id":"saving-plots","title":"Saving Plots","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Once you have created a plot, you will likely want to save it to a file.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This can easily be achieved by calling the ","type":"SimpleText"},{"code":"save","type":"InlinedCode"},{"text":" function:","type":"SimpleText"}]},{"lang":"groovy","snippet":"p.save('example_plot.png')\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"By default, images are saved resolution of 1024 x 800, but you can set this","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"explicitly by passing ","type":"SimpleText"},{"code":"width","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"height","type":"InlinedCode"},{"text":" properties:","type":"SimpleText"}]},{"lang":"groovy","snippet":"p.save('example_plot.png', width: 1600, height: 1200)\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"At this stage, these will save an empty plot, because we have not added any data to it.","type":"SimpleText"}]}]},{"id":"adding-data-to-plots","title":"Adding Data to Plots","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Data is added to plots by creating data objects and using Groovy's ","type":"SimpleText"},{"code":"<<","type":"InlinedCode"},{"text":" operator on the plot","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"object. The data objects themselves are created using the same map-constructor style syntax,","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and can be ","type":"SimpleText"},{"code":"Line","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"Bars","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"Points","type":"InlinedCode"},{"text":", or ","type":"SimpleText"},{"code":"Area","type":"InlinedCode"},{"text":" objects:","type":"SimpleText"}]},{"lang":"groovy","snippet":"p << new Line(\n    x: [1,2,3,4,5],\n    y: [1,4,9,16,25]\n)\n","lineNumber":"","type":"Snippet"},{"scale":0.5,"imageSrc":"/groovy-ngs-utils/userguide/chapter-5-plotting/example_plot.png","timestamp":1754207383381,"shapes":[],"width":1346.0,"height":1028.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"Note that in most of these data objects, the actual position of the data points is expressed","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as ","type":"SimpleText"},{"code":"x","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"y","type":"InlinedCode"},{"text":" attributes of the objects.","type":"SimpleText"}]}]},{"id":"specifying-colors","title":"Specifying Colors","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Further attributes can be specified such as the color of the objects. The color can be","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"specified as ","type":"SimpleText"},{"url":"https://docs.oracle.com/javase%2F7%2Fdocs%2Fapi%2F%2F/java/awt/Color.html","isFile":false,"type":"Link","content":[{"text":"java.awt.Color","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"objects, for which the built in predefined colors are often useful:","type":"SimpleText"}]},{"lang":"groovy","snippet":"import java.awt.Color\n\np << new Line(\n    x: [1,2,3,4,5],\n    y: [1,4,9,16,25],\n    color: Color.red\n)\n\np << new Line(\n    x: [1,2,3,4,5],\n    y: [1,8,27,64,125],\n    color: Color.blue\n)\n","lineNumber":"","type":"Snippet"}]},{"id":"adding-legends","title":"Adding Legends","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To add a legend to the plot, specify the ","type":"SimpleText"},{"code":"displayName","type":"InlinedCode"},{"text":" attribute on each","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"data object to be drawn:","type":"SimpleText"}]},{"lang":"groovy","snippet":"import java.awt.Color\n\np << new Line(\n    x: [1,2,3,4,5],\n    y: [1,4,9,16,25],\n    color: Color.red,\n    displayName: 'Square of Numbers'\n)\n\np << new Line(\n    x: [1,2,3,4,5],\n    y: [1,8,27,64,125],\n    color: Color.blue,\n    displayName: 'Cube of Numbers'\n)\n","lineNumber":"","type":"Snippet"},{"scale":0.5,"imageSrc":"/groovy-ngs-utils/userguide/chapter-5-plotting/example_plot2.png","timestamp":1754207383381,"shapes":[],"width":1328.0,"height":1006.0,"type":"AnnotatedImage"}]},{"id":"distribution-plots","title":"Distribution Plots","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As they are very common to show overall data properties, Groovy NGS supports","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"two kinds of distribution plots that are especially easy to create: Density plots","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and Histograms.","type":"SimpleText"}]},{"lang":"groovy","snippet":"p = new Plot(title: 'Guassian Distribution')\n\np << new gngs.plot.bx.Density.Area(\n       data: (1..100).collect { 5 +  r.nextGaussian() }\n    )\n","lineNumber":"","type":"Snippet"},{"scale":0.5,"imageSrc":"/groovy-ngs-utils/userguide/chapter-5-plotting/density.png","timestamp":1754207383380,"shapes":[],"width":1368.0,"height":1024.0,"type":"AnnotatedImage"},{"lang":"groovy","snippet":"h = new Histogram(\n   title: \"Gaussian Distribution\",\n   data: (1..500).collect { 5 +  r.nextGaussian() }\n)\n","lineNumber":"","type":"Snippet"},{"scale":0.5,"imageSrc":"/groovy-ngs-utils/userguide/chapter-5-plotting/histogram.png","timestamp":1754207383381,"shapes":[],"width":1300.0,"height":1006.0,"type":"AnnotatedImage"}]},{"id":"accessing-generated-images","title":"Accessing Generated Images","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If you want to add more to the generated plots or manipulate the image in","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"additional ways, you can generate the ","type":"SimpleText"},{"url":"https://docs.oracle.com/javase/8/docs/api/java/awt/image/BufferedImage.html","isFile":false,"type":"Link","content":[{"text":"BufferedImage","type":"SimpleText"}]},{"text":"","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"directly and use standard Java features to draw on it:","type":"SimpleText"}]},{"lang":"groovy","snippet":"BufferedImage image = p.image\nGraphics2D imageGraphics = image.createGraphics()\nimageGraphics.drawRect(10,10, 20,20)\n...\n","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"As with saving the plot, you can specify the resolution:","type":"SimpleText"}]},{"lang":"groovy","snippet":"BufferedImage image = p.getImage(1600, 1200)\n...\n","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1754207383381,"tocItem":{"chapterTitle":"Chapter 5 Plotting","pageTitle":"Plotting","pageMeta":{},"dirName":"chapter-5-plotting","fileName":"plotting","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Basic Form of Plots","id":"basic-form-of-plots"},{"title":"Saving Plots","id":"saving-plots"},{"title":"Adding Data to Plots","id":"adding-data-to-plots"},{"title":"Specifying Colors","id":"specifying-colors"},{"title":"Adding Legends","id":"adding-legends"},{"title":"Distribution Plots","id":"distribution-plots"},{"title":"Accessing Generated Images","id":"accessing-generated-images"}]}},{"type":"Page","content":[{"id":"creating-readers-writers-and-streams","title":"Creating Readers, Writers and Streams","type":"Section","content":[{"type":"Paragraph","content":[{"text":"It is very common to encounter files that are compressed in various different formats","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and often an annoyance to have to invoke dedicated APIs and libraries to","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"read them depending on what exact format the user supplied.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Groovy NGS supports a concept of a \"file like\" object that can represent a file","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"in many different forms, from a ","type":"SimpleText"},{"code":"File","type":"InlinedCode"},{"text":" object, input stream object, or a plain path, all of which","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"can be compressed with gzip or bgzip or uncompressed. Many of the classes in Groovy NGS","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"will take an untyped \"file like\" argument which will be auto-detected to use the right","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"process to create a ","type":"SimpleText"},{"code":"Reader","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"Writer","type":"InlinedCode"},{"text":" to handle the file.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You can support similar functionality by calling the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Utils.html#reader(def,%20Closure)","isFile":false,"type":"Link","content":[{"text":"Utils.reader","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"and ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/Utils.html#writer(java.lang.String)","isFile":false,"type":"Link","content":[{"text":"Utils.writer","type":"SimpleText"}]},{"text":" methods.","type":"SimpleText"}]}]},{"id":"formatting-tables","title":"Formatting Tables","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Markdown has become a de facto standard for writing documentation and reports. One of the more tedious","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"aspects is formatting Markdown tables. Groovy NGS supplies a highly flexible function to format data in lists","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"as tables. See","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"def data = [\n    [1,2,3],\n    [4,5,6]\n]\n\nUtils.table(['a','b','c'], data)\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"a | b | c\n--|---|--\n1 | 2 | 3\n4 | 5 | 6\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"}]},{"id":"jupyterlab-support","title":"JupyterLab Support","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Groovy NGS makes an excellent addition to using Groovy within a Jupyter Notebook (or JupyterLab).","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You can use any available Groovy kernel, however a","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"particularly useful one is ","type":"SimpleText"},{"url":"https://github.com/twosigma/beakerx","isFile":false,"type":"Link","content":[{"text":"BeakerX","type":"SimpleText"}]},{"text":" which provides Groovy","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"kernels out of the box along with a range of Jupyter widgets as enhancements. Together with Groovy NGS.","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"this makes a very effective data analysis platform for genomic data.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To further support use within BeakerX, Groovy NGS provides some additional plots. These extend the existing","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"BeakerX plots to provide distrubtion plots (based on kernel density estimates).","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The example below shows how the Groovy NGS density plot is displayed within a Jupyter Notebook.","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"r = new Random()\ndata = (1..1000).collect { r.nextGaussian() }\nnew Plot(title: \"Gaussian Distribution\") << \\\n    new Density.Area(data:data)\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"destination":"/groovy-ngs-utils/userguide/chapter-6-miscellaneous-utilities/guassian_distribution.png","alt":"image","width":650,"title":null,"inlined":true,"timestamp":1754207383382,"height":512,"type":"Image"}]}]}],"config":{},"type":"Columns"}]},{"id":"refgene-database-access","title":"RefGene Database Access","type":"Section","content":[{"type":"Paragraph","content":[{"text":"An enormous amount of work in human genomics requires gene definitions. Groovy NGS provides support for","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"loading and querying the UCSC RefGene database directly to enable access to gene and transcript definitions.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The following example shows how to create the ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/RefGenes.html","isFile":false,"type":"Link","content":[{"text":"RefGenes","type":"SimpleText"}]},{"type":"SoftLineBreak"},{"text":"class and query gene information from it:","type":"SimpleText"}]},{"columns":[{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Input","type":"SimpleText"}]}]},{"lang":"groovy","snippet":"refgene = new RefGenes('refGene.txt.gz')\nrefgene.getExons('DVL1')\n","lineNumber":"","type":"Snippet"}]},{"content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Output","type":"SimpleText"}]}]},{"lang":"text","snippet":"15 regions starting at chr1:1336142-1336516\n","lineNumber":"","type":"Snippet"}]}],"config":{},"type":"Columns"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://ssadedin.github.io/groovy-ngs-utils/doc/gngs/RefGenes.html","isFile":false,"type":"Link","content":[{"text":"RefGenes","type":"SimpleText"}]},{"text":" class provides a wealth of methods","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"for querying gene information.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: Support for Gencode is available in the ","type":"SimpleText"},{"code":"gngs.gencode","type":"InlinedCode"},{"text":" package. This support is functional but still under development","type":"SimpleText"},{"type":"SoftLineBreak"},{"text":"and less tested than the RefGene support.","type":"SimpleText"}]}]}],"lastModifiedTime":1754207383382,"tocItem":{"chapterTitle":"Chapter 6 Miscellaneous Utilities","pageTitle":"Miscellaneous Utilities","pageMeta":{},"dirName":"chapter-6-miscellaneous-utilities","fileName":"miscellaneous-utilities","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Creating Readers, Writers and Streams","id":"creating-readers-writers-and-streams"},{"title":"Formatting Tables","id":"formatting-tables"},{"title":"JupyterLab Support","id":"jupyterlab-support"},{"title":"RefGene Database Access","id":"refgene-database-access"}]}}]